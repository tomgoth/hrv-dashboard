{"ast":null,"code":"var _jsxFileName = \"/Users/gotht/Documents/PMC/hrv-dashboard/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport './App.css'; //import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ReferenceLine } from 'recharts'\n\nimport axios from \"axios\";\nimport { quantile } from './utils/math';\nimport moment from 'moment';\nimport { Line } from '@nivo/line';\nconst commonProperties = {\n  width: 900,\n  height: 400,\n  margin: {\n    top: 20,\n    right: 20,\n    bottom: 60,\n    left: 80\n  },\n  animate: true,\n  enableSlices: 'x'\n};\nconst curveOptions = ['linear', 'monotoneX', 'step', 'stepBefore', 'stepAfter'];\n\nconst CustomSymbol = ({\n  size,\n  color,\n  borderWidth,\n  borderColor\n}) => /*#__PURE__*/React.createElement(\"g\", {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 3\n  }\n}, /*#__PURE__*/React.createElement(\"circle\", {\n  fill: \"#fff\",\n  r: size / 2,\n  strokeWidth: borderWidth,\n  stroke: borderColor,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 7\n  }\n}), /*#__PURE__*/React.createElement(\"circle\", {\n  r: size / 5,\n  strokeWidth: borderWidth,\n  stroke: borderColor,\n  fill: color,\n  fillOpacity: 0.35,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 7\n  }\n}));\n\nfunction App() {\n  // const [data, setData] = useState();\n  // const [q25, setQ25] = useState();\n  // const [q50, setQ50] = useState();\n  // const [q75, setQ75] = useState();\n  // useEffect(() => {\n  //   axios.get('http://localhost:3001/recent')\n  //     .then((response) => {\n  //       let r = response.data.data\n  //       let rMSSDArr = r.map(datum => datum.rMSSD)\n  //       let rMSSDData = r.map(datum => { return {y: datum.rMSSD, x: moment(datum.createdAt).format(\"YYYY-MM-DD\")} })\n  //       let d = [{id: \"rMSSD\", data: rMSSDData}]\n  //       console.log(d)\n  //       setData(d);\n  //       setQ25(quantile(rMSSDArr, .25))\n  //       setQ50(quantile(rMSSDArr, .50))\n  //       setQ75(quantile(rMSSDArr, .75))\n  //   })\n  // },[])\n  //const tickFormatter = (tick) => moment(tick).format('MM/dd')\n  return (\n    /*#__PURE__*/\n    // <LineChart width={1000} height={600} data={data}>\n    //   <Line type=\"natural\" dataKey=\"rMSSD\" stroke=\"#82ca9d\" />\n    //   <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n    //   <ReferenceLine y={q25} label=\"25th Percentile\" stroke=\"red\" strokeDasharray=\"3 3\" />\n    //   <ReferenceLine y={q50} label=\"50th Percentile\" stroke=\"red\" strokeDasharray=\"3 3\" />\n    //   <ReferenceLine y={q75} label=\"75th Percentile\" stroke=\"red\" strokeDasharray=\"3 3\" />\n    //   <XAxis dataKey=\"date\" tickFormatter={tickFormatter}  scale=\"time\" type=\"number\" domain={['dataMin', 'dataMax']}/>\n    //   <YAxis />\n    //   <Tooltip/>\n    // </LineChart>\n    React.createElement(\"div\", {\n      className: \"chartcontainer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 3\n      }\n    }, /*#__PURE__*/React.createElement(Line, Object.assign({}, commonProperties, {\n      // data={[\n      //     {\n      //         id: 'fake corp. A',\n      //         data: [\n      //             { x: '2018-01-01', y: 7 },\n      //             { x: '2018-01-02', y: 5 },\n      //             { x: '2018-01-03', y: 11 },\n      //             { x: '2018-01-04', y: 9 },\n      //             { x: '2018-01-05', y: 12 },\n      //             { x: '2018-01-06', y: 16 },\n      //             { x: '2018-01-07', y: 13 },\n      //             { x: '2018-01-08', y: 13 },\n      //         ],\n      //     },\n      //     {\n      //         id: 'fake corp. B',\n      //         data: [\n      //             { x: '2018-01-04', y: 14 },\n      //             { x: '2018-01-05', y: 14 },\n      //             { x: '2018-01-06', y: 15 },\n      //             { x: '2018-01-07', y: 11 },\n      //             { x: '2018-01-08', y: 10 },\n      //             { x: '2018-01-09', y: 12 },\n      //             { x: '2018-01-10', y: 9 },\n      //             { x: '2018-01-11', y: 7 },\n      //         ],\n      //     },\n      // ]}\n      xScale: {\n        type: 'time',\n        format: '%Y-%m-%d',\n        precision: 'day'\n      },\n      xFormat: \"time:%Y-%m-%d\",\n      yScale: {\n        type: 'linear',\n        stacked: false\n      },\n      axisLeft: {\n        legend: 'linear scale',\n        legendOffset: 12\n      },\n      axisBottom: {\n        format: '%b %d',\n        tickValues: 'every 2 days',\n        legend: 'time scale',\n        legendOffset: -12\n      },\n      curve: \"monotoneX\",\n      enablePointLabel: true,\n      pointSymbol: CustomSymbol,\n      pointSize: 16,\n      pointBorderWidth: 1,\n      pointBorderColor: {\n        from: 'color',\n        modifiers: [['darker', 0.3]]\n      },\n      useMesh: true,\n      enableSlices: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    })))\n  );\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/gotht/Documents/PMC/hrv-dashboard/src/App.js"],"names":["React","useState","useEffect","axios","quantile","moment","Line","commonProperties","width","height","margin","top","right","bottom","left","animate","enableSlices","curveOptions","CustomSymbol","size","color","borderWidth","borderColor","App","type","format","precision","stacked","legend","legendOffset","tickValues","from","modifiers"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './App.css'\n//import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ReferenceLine } from 'recharts'\nimport axios from \"axios\"\nimport { quantile } from './utils/math'\nimport moment from 'moment'\nimport { Line } from '@nivo/line'\n\n\nconst commonProperties = {\n  width: 900,\n  height: 400,\n  margin: { top: 20, right: 20, bottom: 60, left: 80 },\n  animate: true,\n  enableSlices: 'x',\n}\n\nconst curveOptions = ['linear', 'monotoneX', 'step', 'stepBefore', 'stepAfter']\n\nconst CustomSymbol = ({ size, color, borderWidth, borderColor }) => (\n  <g>\n      <circle fill=\"#fff\" r={size / 2} strokeWidth={borderWidth} stroke={borderColor} />\n      <circle\n          r={size / 5}\n          strokeWidth={borderWidth}\n          stroke={borderColor}\n          fill={color}\n          fillOpacity={0.35}\n      />\n  </g>\n)\n\n\nfunction App() {\n  // const [data, setData] = useState();\n  // const [q25, setQ25] = useState();\n  // const [q50, setQ50] = useState();\n  // const [q75, setQ75] = useState();\n\n\n  // useEffect(() => {\n  //   axios.get('http://localhost:3001/recent')\n  //     .then((response) => {\n  //       let r = response.data.data\n  //       let rMSSDArr = r.map(datum => datum.rMSSD)\n  //       let rMSSDData = r.map(datum => { return {y: datum.rMSSD, x: moment(datum.createdAt).format(\"YYYY-MM-DD\")} })\n  //       let d = [{id: \"rMSSD\", data: rMSSDData}]\n      \n  //       console.log(d)\n      \n  //       setData(d);\n  //       setQ25(quantile(rMSSDArr, .25))\n  //       setQ50(quantile(rMSSDArr, .50))\n  //       setQ75(quantile(rMSSDArr, .75))\n  //   })\n  // },[])\n\n  //const tickFormatter = (tick) => moment(tick).format('MM/dd')\n\n  return (\n    // <LineChart width={1000} height={600} data={data}>\n    //   <Line type=\"natural\" dataKey=\"rMSSD\" stroke=\"#82ca9d\" />\n    //   <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"5 5\" />\n    //   <ReferenceLine y={q25} label=\"25th Percentile\" stroke=\"red\" strokeDasharray=\"3 3\" />\n    //   <ReferenceLine y={q50} label=\"50th Percentile\" stroke=\"red\" strokeDasharray=\"3 3\" />\n    //   <ReferenceLine y={q75} label=\"75th Percentile\" stroke=\"red\" strokeDasharray=\"3 3\" />\n    //   <XAxis dataKey=\"date\" tickFormatter={tickFormatter}  scale=\"time\" type=\"number\" domain={['dataMin', 'dataMax']}/>\n    //   <YAxis />\n    //   <Tooltip/>\n    // </LineChart>\n\n  <div className=\"chartcontainer\">\n    <Line\n        {...commonProperties}\n        // data={[\n        //     {\n        //         id: 'fake corp. A',\n        //         data: [\n        //             { x: '2018-01-01', y: 7 },\n        //             { x: '2018-01-02', y: 5 },\n        //             { x: '2018-01-03', y: 11 },\n        //             { x: '2018-01-04', y: 9 },\n        //             { x: '2018-01-05', y: 12 },\n        //             { x: '2018-01-06', y: 16 },\n        //             { x: '2018-01-07', y: 13 },\n        //             { x: '2018-01-08', y: 13 },\n        //         ],\n        //     },\n        //     {\n        //         id: 'fake corp. B',\n        //         data: [\n        //             { x: '2018-01-04', y: 14 },\n        //             { x: '2018-01-05', y: 14 },\n        //             { x: '2018-01-06', y: 15 },\n        //             { x: '2018-01-07', y: 11 },\n        //             { x: '2018-01-08', y: 10 },\n        //             { x: '2018-01-09', y: 12 },\n        //             { x: '2018-01-10', y: 9 },\n        //             { x: '2018-01-11', y: 7 },\n        //         ],\n        //     },\n        // ]}\n        xScale={{\n            type: 'time',\n            format: '%Y-%m-%d',\n            precision: 'day',\n        }}\n        xFormat=\"time:%Y-%m-%d\"\n        yScale={{\n            type: 'linear',\n            stacked: false,\n        }}\n        axisLeft={{\n            legend: 'linear scale',\n            legendOffset: 12,\n        }}\n        axisBottom={{\n            format: '%b %d',\n            tickValues: 'every 2 days',\n            legend: 'time scale',\n            legendOffset: -12,\n        }}\n        curve='monotoneX'\n        enablePointLabel={true}\n        pointSymbol={CustomSymbol}\n        pointSize={16}\n        pointBorderWidth={1}\n        pointBorderColor={{\n            from: 'color',\n            modifiers: [['darker', 0.3]],\n        }}\n        useMesh={true}\n        enableSlices={false}\n    />\n  </div>\n  )\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}